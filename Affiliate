from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required
from datetime import datetime

app = Flask(__name__)

# Configurations
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///affiliate_program.db'
app.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this for production

# Initialize the database and JWT
db = SQLAlchemy(app)
jwt = JWTManager(app)

# Affiliate Model
class Affiliate(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(150), nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    affiliate_code = db.Column(db.String(50), unique=True, nullable=False)
    commissions = db.Column(db.Float, default=0.0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# Sale/Click Tracking Model
class AffiliateClick(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    affiliate_id = db.Column(db.Integer, db.ForeignKey('affiliate.id'), nullable=False)
    click_timestamp = db.Column(db.DateTime, default=datetime.utcnow)

class Sale(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    affiliate_id = db.Column(db.Integer, db.ForeignKey('affiliate.id'), nullable=False)
    sale_amount = db.Column(db.Float, nullable=False)
    commission = db.Column(db.Float, nullable=False)
    sale_timestamp = db.Column(db.DateTime, default=datetime.utcnow)

# Initialize Database
@app.before_first_request
def create_tables():
    db.create_all()

# Affiliate Sign-Up
@app.route('/affiliate/signup', methods=['POST'])
def affiliate_signup():
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')
    password = data.get('password')

    # Generate affiliate code
    affiliate_code = email.split('@')[0] + str(datetime.utcnow().timestamp()).split('.')[0]

    new_affiliate = Affiliate(
        name=name,
        email=email,
        password=password,  # Note: In a real application, never store plaintext passwords
        affiliate_code=affiliate_code
    )

    db.session.add(new_affiliate)
    db.session.commit()

    return jsonify({'msg': 'Affiliate created successfully!', 'affiliate_code': affiliate_code}), 201

# Affiliate Login
@app.route('/affiliate/login', methods=['POST'])
def affiliate_login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    affiliate = Affiliate.query.filter_by(email=email, password=password).first()

    if affiliate:
        access_token = create_access_token(identity={'id': affiliate.id, 'affiliate_code': affiliate.affiliate_code})
        return jsonify({'access_token': access_token, 'affiliate_code': affiliate.affiliate_code}), 200

    return jsonify({'msg': 'Bad credentials'}), 401

# Track Click
@app.route('/affiliate/<affiliate_code>/click', methods=['GET'])
def track_click(affiliate_code):
    affiliate = Affiliate.query.filter_by(affiliate_code=affiliate_code).first()

    if affiliate:
        new_click = AffiliateClick(affiliate_id=affiliate.id)
        db.session.add(new_click)
        db.session.commit()

        return jsonify({'msg': 'Click tracked'}), 200
    return jsonify({'msg': 'Invalid affiliate code'}), 400

# Track Sale
@app.route('/affiliate/<affiliate_code>/sale', methods=['POST'])
def track_sale(affiliate_code):
    data = request.get_json()
    sale_amount = data.get('sale_amount')

    affiliate = Affiliate.query.filter_by(affiliate_code=affiliate_code).first()

    if affiliate:
        # For simplicity, let's assume a flat 10% commission
        commission = sale_amount * 0.10
        new_sale = Sale(affiliate_id=affiliate.id, sale_amount=sale_amount, commission=commission)

        # Update affiliate's total commissions
        affiliate.commissions += commission

        db.session.add(new_sale)
        db.session.commit()

        return jsonify({'msg': 'Sale tracked', 'commission': commission}), 200
    return jsonify({'msg': 'Invalid affiliate code'}), 400

# Affiliate Dashboard (Protected)
@app.route('/affiliate/dashboard', methods=['GET'])
@jwt_required()
def affiliate_dashboard():
    current_affiliate = request.headers.get('Authorization').split(" ")[1]  # Extract token
    affiliate_id = current_affiliate['id']

    # Fetch clicks and sales
    clicks = AffiliateClick.query.filter_by(affiliate_id=affiliate_id).count()
    sales = Sale.query.filter_by(affiliate_id=affiliate_id).all()

    total_sales = sum(sale.sale_amount for sale in sales)
    total_commissions = sum(sale.commission for sale in sales)

    return jsonify({
        'total_clicks': clicks,
        'total_sales': total_sales,
        'total_commissions': total_commissions
    }), 200

if __name__ == '__main__':
    app.run(debug=True)
